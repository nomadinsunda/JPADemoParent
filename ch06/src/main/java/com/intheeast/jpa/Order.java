package com.intheeast.jpa;

import lombok.*;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Entity
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@ToString(exclude = "orderItems")
@Table(name = "ORDERS")  // order 키워드는 정렬 관련 데이터베이스 예약어임. 충돌 방지를 위해!
public class Order {

	// One-to-Many 단방향 연관관계 매핑
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String customerName;

    //🔹단방향 OneToMany - 외래키는 OrderItem에 존재하지만 관리 주체는 Order
    // : 외래키는 OrderItem 테이블에 있는데, Order가 관리를 하기 때문에 이 연관 관계는 모두가 극혐함
    //   사용하지 말것!!!
    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    @JoinColumn(name = "order_id") // OrderItem 테이블에 FK 생성
    /*
     create table OrderItem (
       id bigint generated by default as identity,
        productName varchar(255),
        quantity integer not null,
        order_id bigint,
        primary key (id)
     )
     
     alter table OrderItem 
       add constraint FK8n4q55qxr4ox0kltr6nb9pa2h 
       foreign key (order_id) 
       references ORDERS
     */
    // @JoinColumn(name = "order_id")가 적용된 필드로 부터 얻은 정보[List<OrderItem>]로,
    // OrderItem 테이블에 order_id 외래키를 만듦.
    private final List<OrderItem> orderItems = new ArrayList<>();

    public Order(String customerName) {
        this.customerName = customerName;
    }

    // 비즈니스 메서드
    public void addItem(OrderItem item) {
        orderItems.add(item);
    }
    
    public void removeItem(OrderItem item) {
        orderItems.remove(item);
    }

    public List<OrderItem> getOrderItems() {
        return Collections.unmodifiableList(orderItems); // 외부 변경 차단
    }
}
